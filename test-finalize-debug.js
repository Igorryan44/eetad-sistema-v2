import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://umkizxftwrwqiiahjbrr.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVta2l6eGZ0d3J3cWlpYWhqYnJyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDkwNzEyNzIsImV4cCI6MjA2NDY0NzI3Mn0.6rGPdMiRcQ_plkkkHiwy73rOrSoGcLwAqZogNyQplTs';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testFinalizeDebug() {
  console.log('üîç Testando fun√ß√£o finalize-enrollment em detalhes...');
  
  try {
    // 1. Primeiro, verificar quantas matr√≠culas existem antes
    console.log('\n1Ô∏è‚É£ Verificando matr√≠culas antes da efetiva√ß√£o...');
    
    const { data: beforeData, error: beforeError } = await supabase.functions.invoke('get-enrollments', {
      headers: {
        Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVta2l6eGZ0d3J3cWlpYWhqYnJyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDkwNzEyNzIsImV4cCI6MjA2NDY0NzI3Mn0.6rGPdMiRcQ_plkkkHiwy73rOrSoGcLwAqZogNyQplTs'
      }
    });
    
    if (beforeError) {
      console.log('‚ùå Erro ao buscar matr√≠culas antes:', beforeError);
    } else {
      console.log('‚úÖ Matr√≠culas antes:', Array.isArray(beforeData) ? beforeData.length : 'Formato inv√°lido');
    }
    
    // 2. Buscar um aluno pendente para efetivar
    console.log('\n2Ô∏è‚É£ Buscando alunos pendentes...');
    
    const { data: pendingData, error: pendingError } = await supabase.functions.invoke('get-pending-enrollments', {
      headers: {
        Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVta2l6eGZ0d3J3cWlpYWhqYnJyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDkwNzEyNzIsImV4cCI6MjA2NDY0NzI3Mn0.6rGPdMiRcQ_plkkkHiwy73rOrSoGcLwAqZogNyQplTs'
      }
    });
    
    if (pendingError) {
      console.log('‚ùå Erro ao buscar alunos pendentes:', pendingError);
      return;
    }
    
    if (!Array.isArray(pendingData) || pendingData.length === 0) {
      console.log('‚ö†Ô∏è Nenhum aluno pendente encontrado');
      return;
    }
    
    const student = pendingData[0];
    console.log('üë§ Aluno selecionado:', student.nome, '- CPF:', student.cpf);
    
    // 3. Efetivar a matr√≠cula
    console.log('\n3Ô∏è‚É£ Efetivando matr√≠cula...');
    
    const enrollmentData = {
      cpf: student.cpf,
      rowIndex: student.rowIndex,
      ciclo: 'Teste 2025',
      subnucleo: 'Teste Subn√∫cleo',
      data: new Date().toISOString().split('T')[0],
      status: 'Efetivado',
      observacao: 'Teste de efetiva√ß√£o - ' + new Date().toLocaleString()
    };
    
    const { data: finalizeData, error: finalizeError } = await supabase.functions.invoke('finalize-enrollment', {
      body: enrollmentData,
      headers: {
        Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVta2l6eGZ0d3J3cWlpYWhqYnJyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDkwNzEyNzIsImV4cCI6MjA2NDY0NzI3Mn0.6rGPdMiRcQ_plkkkHiwy73rOrSoGcLwAqZogNyQplTs'
      }
    });
    
    if (finalizeError) {
      console.log('‚ùå Erro ao efetivar matr√≠cula:', finalizeError);
      return;
    }
    
    console.log('‚úÖ Matr√≠cula efetivada:', finalizeData);
    
    // 4. Aguardar um pouco e verificar se a matr√≠cula apareceu
    console.log('\n4Ô∏è‚É£ Aguardando 3 segundos e verificando matr√≠culas...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    const { data: afterData, error: afterError } = await supabase.functions.invoke('get-enrollments', {
      headers: {
        Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVta2l6eGZ0d3J3cWlpYWhqYnJyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDkwNzEyNzIsImV4cCI6MjA2NDY0NzI3Mn0.6rGPdMiRcQ_plkkkHiwy73rOrSoGcLwAqZogNyQplTs'
      }
    });
    
    if (afterError) {
      console.log('‚ùå Erro ao buscar matr√≠culas depois:', afterError);
    } else {
      console.log('‚úÖ Matr√≠culas depois:', Array.isArray(afterData) ? afterData.length : 'Formato inv√°lido');
      
      if (Array.isArray(afterData) && afterData.length > 0) {
        console.log('üìã Primeira matr√≠cula encontrada:', afterData[0]);
        
        // Verificar se nossa matr√≠cula est√° l√°
        const ourEnrollment = afterData.find(enrollment => enrollment.cpf === student.cpf);
        if (ourEnrollment) {
          console.log('üéØ Nossa matr√≠cula encontrada:', ourEnrollment);
        } else {
          console.log('‚ùå Nossa matr√≠cula N√ÉO encontrada');
        }
      } else {
        console.log('‚ö†Ô∏è Nenhuma matr√≠cula encontrada ap√≥s efetiva√ß√£o');
      }
    }
    
  } catch (error) {
    console.log('‚ùå Erro no teste:', error.message);
  }
}

testFinalizeDebug();