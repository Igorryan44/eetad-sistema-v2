import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Carrega vari√°veis de ambiente
dotenv.config({ path: path.join(__dirname, '..', '.env.local') });
dotenv.config({ path: path.join(__dirname, '..', '.env') });

import { readSheetData, makeAuthenticatedRequest } from './utils/google-auth.js';

async function limparDadosTesteSimples() {
  const spreadsheetId = process.env.GOOGLE_SHEETS_SPREADSHEET_ID;
  
  if (!spreadsheetId) {
    console.log('‚ùå GOOGLE_SHEETS_SPREADSHEET_ID n√£o configurado');
    return;
  }

  console.log('üßπ Identificando dados de teste na aba "matriculas"...\n');
  
  try {
    // L√™ os dados da aba matriculas
    console.log('üìñ Lendo dados da aba "matriculas"...');
    const data = await readSheetData(spreadsheetId, 'matriculas');
    
    if (!data || data.length === 0) {
      console.log('‚úÖ Aba "matriculas" est√° vazia');
      return;
    }
    
    console.log(`üìä Total de linhas encontradas: ${data.length}`);
    
    // Identifica linhas de teste
    const linhasTeste = [];
    
    for (let i = 1; i < data.length; i++) { // Pula o cabe√ßalho (linha 0)
      const linha = data[i];
      
      // Verifica se √© dado de teste
      const isTestData = linha.some(cell => {
        if (!cell) return false;
        const cellStr = cell.toString().toLowerCase();
        return cellStr.includes('teste') || 
               cellStr.includes('test') ||
               cellStr.includes('jo√£o teste') ||
               cellStr.includes('n√∫cleo teste') ||
               cellStr.includes('subn√∫cleo teste');
      });
      
      if (isTestData) {
        linhasTeste.push({
          linha: i + 1, // +1 porque o Google Sheets usa √≠ndice baseado em 1
          dados: linha.slice(0, 5).join(' | ') // Primeiras 5 colunas para identifica√ß√£o
        });
      }
    }
    
    console.log(`\nüìä DADOS DE TESTE ENCONTRADOS:`);
    console.log('='.repeat(60));
    
    if (linhasTeste.length === 0) {
      console.log('‚úÖ Nenhum dado de teste encontrado');
      return;
    }
    
    linhasTeste.forEach((item, index) => {
      console.log(`${index + 1}. Linha ${item.linha}: ${item.dados}`);
    });
    
    console.log(`\nüìä RESUMO:`);
    console.log(`   Total de linhas: ${data.length}`);
    console.log(`   Dados de teste encontrados: ${linhasTeste.length}`);
    
    // Para remover as linhas, vamos usar a API de batch update
    console.log('\nüóëÔ∏è Removendo linhas de teste...');
    
    // Ordena as linhas em ordem decrescente para remover de baixo para cima
    // (evita problemas com √≠ndices que mudam ap√≥s remo√ß√£o)
    const linhasOrdenadas = linhasTeste
      .map(item => item.linha - 1) // Converte para √≠ndice baseado em 0
      .sort((a, b) => b - a); // Ordem decrescente
    
    // Prepara as requisi√ß√µes de remo√ß√£o
    const requests = linhasOrdenadas.map(rowIndex => ({
      deleteDimension: {
        range: {
          sheetId: 1590144264, // ID da aba "matriculas" (obtido anteriormente)
          dimension: 'ROWS',
          startIndex: rowIndex,
          endIndex: rowIndex + 1
        }
      }
    }));
    
    // Executa a remo√ß√£o em lote
    const batchUpdateUrl = `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}:batchUpdate`;
    
    const response = await makeAuthenticatedRequest(batchUpdateUrl, {
      method: 'POST',
      body: JSON.stringify({
        requests: requests
      })
    });
    
    const result = await response.json();
    
    console.log(`‚úÖ ${linhasTeste.length} linhas de teste removidas com sucesso!`);
    console.log('üìä Planilha limpa e pronta para uso');
    
  } catch (error) {
    console.error('‚ùå Erro ao limpar dados de teste:', error.message);
    
    // Se der erro, mostra instru√ß√µes manuais
    console.log('\nüí° INSTRU√á√ïES PARA LIMPEZA MANUAL:');
    console.log('1. Abra a planilha no Google Sheets');
    console.log('2. V√° para a aba "matriculas"');
    console.log('3. Procure por linhas que contenham:');
    console.log('   - "Jo√£o Teste"');
    console.log('   - "N√∫cleo Teste"');
    console.log('   - "Subn√∫cleo Teste"');
    console.log('   - Qualquer texto com "teste"');
    console.log('4. Delete essas linhas manualmente');
  }
}

limparDadosTesteSimples();