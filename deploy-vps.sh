#!/bin/bash

# Script de Deploy Autom√°tico para VPS
# EETAD Sistema v2

echo "üöÄ Iniciando deploy na VPS..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir mensagens coloridas
print_status() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# Verificar se estamos no diret√≥rio correto
if [ ! -f "package.json" ]; then
    print_error "Execute este script na raiz do projeto EETAD"
    exit 1
fi

# Verificar se o Git est√° configurado
if ! git status &> /dev/null; then
    print_error "Este n√£o √© um reposit√≥rio Git v√°lido"
    exit 1
fi

# Verificar se h√° altera√ß√µes n√£o commitadas
if [ -n "$(git status --porcelain)" ]; then
    print_warning "H√° altera√ß√µes n√£o commitadas:"
    git status --short
    
    read -p "Deseja fazer commit das altera√ß√µes? (s/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Ss]$ ]]; then
        read -p "Digite a mensagem do commit: " commit_message
        if [ -z "$commit_message" ]; then
            commit_message="Deploy autom√°tico - $(date '+%Y-%m-%d %H:%M')"
        fi
        git add .
        git commit -m "$commit_message"
        print_status "Commit realizado: $commit_message"
    fi
fi

# Fazer pull das altera√ß√µes
print_info "Fazendo pull das altera√ß√µes..."
git pull origin main

# Instalar depend√™ncias do frontend
print_info "Instalando depend√™ncias do frontend..."
npm install

# Instalar depend√™ncias do backend
print_info "Instalando depend√™ncias do backend..."
cd local-server
npm install
cd ..

# Build do frontend
print_info "Fazendo build do frontend..."
npm run build

# Verificar se o build foi criado
if [ ! -d "dist" ]; then
    print_error "Build falhou - pasta 'dist' n√£o foi criada"
    exit 1
fi

print_status "Build criado com sucesso"

# Verificar se PM2 est√° instalado
if ! command -v pm2 &> /dev/null; then
    print_error "PM2 n√£o est√° instalado. Execute: sudo npm install -g pm2"
    exit 1
fi

# Verificar se o arquivo de configura√ß√£o do PM2 existe
if [ ! -f "ecosystem.config.js" ]; then
    print_warning "Arquivo ecosystem.config.js n√£o encontrado. Criando..."
    
    cat > ecosystem.config.js << 'EOF'
module.exports = {
  apps: [
    {
      name: 'eetad-backend',
      script: './local-server/index.js',
      cwd: '/var/www/eetad-sistema-v2',
      instances: 1,
      autorestart: true,
      watch: false,
      max_memory_restart: '1G',
      env: {
        NODE_ENV: 'production',
        PORT: 3003
      },
      error_file: '/var/log/eetad/backend-error.log',
      out_file: '/var/log/eetad/backend-out.log',
      log_file: '/var/log/eetad/backend-combined.log'
    }
  ]
};
EOF
    
    print_status "Arquivo ecosystem.config.js criado"
fi

# Parar aplica√ß√£o se estiver rodando
print_info "Parando aplica√ß√£o anterior..."
pm2 stop eetad-backend 2>/dev/null || true

# Iniciar aplica√ß√£o
print_info "Iniciando aplica√ß√£o..."
pm2 start ecosystem.config.js

# Salvar configura√ß√£o do PM2
pm2 save

# Verificar status
print_info "Verificando status da aplica√ß√£o..."
pm2 status

# Verificar se a aplica√ß√£o est√° respondendo
print_info "Testando aplica√ß√£o..."
sleep 5

if curl -f http://localhost:3003/health &> /dev/null; then
    print_status "Aplica√ß√£o est√° rodando e respondendo!"
else
    print_warning "Aplica√ß√£o pode n√£o estar respondendo corretamente"
    print_info "Verifique os logs com: pm2 logs eetad-backend"
fi

# Verificar Nginx
print_info "Verificando Nginx..."
if sudo systemctl is-active --quiet nginx; then
    print_status "Nginx est√° rodando"
else
    print_warning "Nginx n√£o est√° rodando. Execute: sudo systemctl start nginx"
fi

# Mostrar informa√ß√µes finais
print_status "Deploy conclu√≠do!"
echo
print_info "Informa√ß√µes √∫teis:"
echo "‚Ä¢ Status da aplica√ß√£o: pm2 status"
echo "‚Ä¢ Logs da aplica√ß√£o: pm2 logs eetad-backend"
echo "‚Ä¢ Reiniciar aplica√ß√£o: pm2 restart eetad-backend"
echo "‚Ä¢ Status do Nginx: sudo systemctl status nginx"
echo "‚Ä¢ Logs do Nginx: sudo tail -f /var/log/nginx/error.log"
echo
print_info "URLs para testar:"
echo "‚Ä¢ Frontend: http://seu-dominio.com"
echo "‚Ä¢ Backend: http://seu-dominio.com/api/"
echo "‚Ä¢ Health Check: http://seu-dominio.com/health"
echo
print_warning "Lembre-se de configurar SSL com Let's Encrypt se ainda n√£o fez!"
