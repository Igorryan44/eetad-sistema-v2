import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const SUPABASE_URL = 'https://umkizxftwrwqiiahjbrr.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVta2l6eGZ0d3J3cWlpYWhqYnJyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDkwNzEyNzIsImV4cCI6MjA2NDY0NzI3Mn0.6rGPdMiRcQ_plkkkHiwy73rOrSoGcLwAqZogNyQplTs';

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function testPendingStudentsFlow() {
  console.log('üß™ Testando fluxo completo de alunos pendentes...');
  console.log('üìã Nova funcionalidade: Coluna Status na aba "dados pessoais"');
  console.log('üîÑ Fluxo: Pendente ‚Üí Buscar ‚Üí Efetivar ‚Üí Matriculado');
  
  try {
    // 1. Testar busca de alunos pendentes
    console.log('\n1Ô∏è‚É£ Testando fun√ß√£o get-pending-students...');
    const { data: pendingData, error: pendingError } = await supabase.functions.invoke('get-pending-students', {
      headers: {
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    if (pendingError) {
      console.error('‚ùå Erro ao buscar alunos pendentes:', pendingError);
      return;
    }

    console.log('‚úÖ Resposta da busca:', pendingData);
    console.log(`üìä Total de alunos com status "Pendente": ${pendingData?.students?.length || 0}`);
    
    if (pendingData?.students?.length > 0) {
      console.log('\nüìã Detalhes dos alunos pendentes:');
      pendingData.students.forEach((student, index) => {
        console.log(`${index + 1}. ${student.nome} (CPF: ${student.cpf}) - Status: ${student.status || 'N/A'}`);
      });

      // 2. Testar efetiva√ß√£o de matr√≠cula
      console.log('\n2Ô∏è‚É£ Testando efetiva√ß√£o de matr√≠cula...');
      const firstStudent = pendingData.students[0];
      
      const enrollmentData = {
        cpf: firstStudent.cpf,
        ciclo: 'Ciclo B√°sico',
        subnucleo: 'Subn√∫cleo Central',
        status: 'Ativo',
        observacao: 'Matr√≠cula efetivada via teste autom√°tico',
        dataEvento: new Date().toLocaleDateString('pt-BR')
      };

      console.log('üìù Dados para efetiva√ß√£o:', enrollmentData);

      const { data: enrollmentResult, error: enrollmentError } = await supabase.functions.invoke('finalize-student-enrollment', {
        body: enrollmentData,
        headers: {
          'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
          'Content-Type': 'application/json'
        }
      });

      if (enrollmentError) {
        console.error('‚ùå Erro ao efetivar matr√≠cula:', enrollmentError);
      } else {
        console.log('‚úÖ Matr√≠cula efetivada com sucesso!');
        console.log('üìÑ Resultado:', enrollmentResult);
        
        // 3. Verificar se o status foi atualizado
        console.log('\n3Ô∏è‚É£ Verificando atualiza√ß√£o do status...');
        const { data: updatedData, error: updateError } = await supabase.functions.invoke('get-pending-students', {
          headers: {
            'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
            'Content-Type': 'application/json'
          }
        });

        if (!updateError) {
          const remainingPending = updatedData?.students?.length || 0;
          console.log(`üìä Alunos pendentes restantes: ${remainingPending}`);
          
          if (remainingPending < pendingData.students.length) {
            console.log('‚úÖ Status atualizado corretamente! Aluno removido da lista de pendentes.');
          } else {
            console.log('‚ö†Ô∏è Status pode n√£o ter sido atualizado. Verificar manualmente.');
          }
        }
      }
    } else {
      console.log('‚ÑπÔ∏è Nenhum aluno com status "Pendente" encontrado.');
      console.log('üí° Para testar, adicione um aluno na aba "dados pessoais" com Status = "Pendente"');
    }

  } catch (error) {
    console.error('‚ùå Erro geral no teste:', error);
  }
}

// Executar teste
testPendingStudentsFlow();