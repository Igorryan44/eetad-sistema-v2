// Diagn√≥stico Avan√ßado - Google Sheets Integration
console.log('üîç DIAGN√ìSTICO AVAN√áADO - GOOGLE SHEETS');
console.log('=====================================');

// Fun√ß√£o para testar com logs detalhados
async function testarComLogs() {
    try {
        console.log('\nüìã Testando get-pending-enrollments com logs detalhados...');
        
        const response = await fetch('https://umkizxftwrwqiiahjbrr.supabase.co/functions/v1/get-pending-enrollments', {
            method: 'GET',
            headers: {
                'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVta2l6eGZ0d3J3cWlpYWhqYnJyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDkwNzEyNzIsImV4cCI6MjA2NDY0NzI3Mn0.6rGPdMiRcQ_plkkkHiwy73rOrSoGcLwAqZogNyQplTs',
                'Content-Type': 'application/json'
            }
        });

        console.log(`   Status: ${response.status}`);
        console.log(`   Status Text: ${response.statusText}`);
        
        // Verificar headers de resposta
        console.log('\nüìÑ Headers de Resposta:');
        for (let [key, value] of response.headers.entries()) {
            console.log(`   ${key}: ${value}`);
        }
        
        if (response.ok) {
            const data = await response.json();
            console.log(`\n‚úÖ Resposta JSON: ${JSON.stringify(data, null, 2)}`);
            console.log(`üìä Total de registros: ${data.length}`);
            
            if (Array.isArray(data) && data.length === 0) {
                console.log('\nüîç INVESTIGA√á√ÉO DETALHADA:');
                console.log('   A fun√ß√£o est√° retornando array vazio. Poss√≠veis causas:');
                console.log('   1. ‚ùå Credenciais n√£o configuradas ou inv√°lidas');
                console.log('   2. ‚ùå Planilha sem dados ou sem status "Pendente"');
                console.log('   3. ‚ùå Problema de permiss√£o na planilha');
                console.log('   4. ‚ùå Estrutura da planilha diferente do esperado');
            }
        } else {
            const errorText = await response.text();
            console.log(`‚ùå Erro: ${errorText}`);
        }
    } catch (error) {
        console.log(`‚ùå Erro de conex√£o: ${error.message}`);
    }
}

// Fun√ß√£o para verificar logs do Supabase
async function verificarLogsSupabase() {
    console.log('\nüìä VERIFICA√á√ÉO DE LOGS SUPABASE');
    console.log('================================');
    console.log('Para ver logs detalhados:');
    console.log('1. Acesse: https://supabase.com/dashboard');
    console.log('2. V√° em Edge Functions > get-pending-enrollments');
    console.log('3. Clique na aba "Logs"');
    console.log('4. Execute a fun√ß√£o e veja os logs em tempo real');
}

// Fun√ß√£o para testar estrutura da planilha
async function testarEstruturaPlanilha() {
    console.log('\nüìã VERIFICA√á√ÉO DA ESTRUTURA DA PLANILHA');
    console.log('=======================================');
    console.log('ID da Planilha: 1BKet2O-aSnNKPRflC24PxnOQikVA5k9RhzmBiJtzhAA');
    console.log('Aba: dados pessoais');
    console.log('');
    console.log('Estrutura esperada (colunas):');
    console.log('0: Data Cadastro');
    console.log('1: Nome');
    console.log('2: RG');
    console.log('3: CPF');
    console.log('4: Telefone');
    console.log('5: Email');
    console.log('...');
    console.log('22: Status (deve conter "Pendente")');
    console.log('');
    console.log('‚ö†Ô∏è IMPORTANTE: A coluna 23 (√≠ndice 22) deve ter o valor "Pendente"');
}

// Fun√ß√£o para verificar permiss√µes
async function verificarPermissoes() {
    console.log('\nüîê VERIFICA√á√ÉO DE PERMISS√ïES');
    console.log('============================');
    console.log('Verifique se:');
    console.log('1. ‚úÖ A service account foi compartilhada na planilha');
    console.log('2. ‚úÖ Permiss√£o definida como "Editor" ou "Viewer"');
    console.log('3. ‚úÖ Email da service account: [seu-email]@[projeto].iam.gserviceaccount.com');
    console.log('4. ‚úÖ Planilha est√° acess√≠vel publicamente ou compartilhada');
}

// Fun√ß√£o para testar outras fun√ß√µes relacionadas
async function testarOutrasFuncoes() {
    console.log('\nüîÑ TESTANDO OUTRAS FUN√á√ïES RELACIONADAS');
    console.log('=======================================');
    
    // Testar check-student-cpf
    try {
        console.log('\nüìû Testando check-student-cpf...');
        const response = await fetch('https://umkizxftwrwqiiahjbrr.supabase.co/functions/v1/check-student-cpf', {
            method: 'POST',
            headers: {
                'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVta2l6eGZ0d3J3cWlpYWhqYnJyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDkwNzEyNzIsImV4cCI6MjA2NDY0NzI3Mn0.6rGPdMiRcQ_plkkkHiwy73rOrSoGcLwAqZogNyQplTs',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ cpf: '123.456.789-00' })
        });
        
        console.log(`   Status: ${response.status}`);
        if (response.ok) {
            const data = await response.json();
            console.log(`   ‚úÖ Resposta: ${JSON.stringify(data)}`);
        } else {
            console.log(`   ‚ùå Erro: ${response.statusText}`);
        }
    } catch (error) {
        console.log(`   ‚ùå Erro: ${error.message}`);
    }
}

// Executar todos os testes
async function executarDiagnosticoCompleto() {
    await testarComLogs();
    await verificarLogsSupabase();
    await testarEstruturaPlanilha();
    await verificarPermissoes();
    await testarOutrasFuncoes();
    
    console.log('\nüéØ PR√ìXIMAS A√á√ïES RECOMENDADAS:');
    console.log('===============================');
    console.log('1. üîç Verificar logs no Supabase Dashboard');
    console.log('2. üìã Confirmar estrutura da planilha');
    console.log('3. üîê Validar permiss√µes da service account');
    console.log('4. üìä Verificar se existem dados com status "Pendente"');
    console.log('5. üîÑ Reiniciar as Edge Functions se necess√°rio');
}

executarDiagnosticoCompleto();